{"version":3,"sources":["components/CustomNavbar/CustomNavbar.jsx","components/CountryCard/CountryCard.jsx","components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomNavbar","react_default","a","createElement","className","Navbar","bg","expand","Nav","pullRight","Component","CountryCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","capital","flag","region","Image","style","maxHeight","maxWidth","alt","src","circle","Home","componentWillMount","axios","get","then","response","console","log","setState","countryData","data","allData","readyPlot","catch","error","handleTextSearch","event","type","val","target","value","countryName","filterDataForSearch","capitalName","regionName","filterArr","searchCountry","toLowerCase","searchCapital","searchRegion","forEach","item","indexOf","push","_this2","countryArr","index","CountryCard_CountryCard_CountryCard","TextField_default","id","width","marginTop","label","onChange","margin","App","CustomNavbar_CustomNavbar_CustomNavbar","Home_Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b01472f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar, Nav, Form, FormControl,Button ,NavDropdown,NavItem} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport './CustomNavbar.css';\n\nexport default class CustomNavbar extends Component {\n  render() {\n    return (\n      <div className=\"navbar-space\">\n          <Navbar bg=\"light\" expand=\"lg\">\n              <div className=\"center-brand\">CountryBoard</div>\n              <Nav pullRight>\n              </Nav>\n          </Navbar>\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Image} from 'react-bootstrap';\nimport './CountryCard.css';\n\nexport default class CountryCard extends Component {\n  \n  constructor(props){\n      super(props);\n      this.state = {\n        name : this.props.name,\n        capital : this.props.capital,\n        flag : this.props.flag,\n        region : this.props.region,\n      }\n  }  \n    \n  render() {\n    return (\n      <div className=\"country-card-main\">\n        <div className=\"country-name\">{this.state.name}</div>\n        <div className=\"info-body\">\n            <div className=\"country-flag\">\n            <Image style={{maxHeight:'100%', maxWidth:'100%'}} alt=\"Loading...\" src={this.state.flag} circle className=\"flag-img\" />\n            </div>\n            <div className=\"country-info\">\n                <div className=\"info-class\">\n                    <div className=\"sub-country-info-type\">Capital: </div><div className=\"sub-country-info-value\">{this.state.capital}</div>\n                </div>\n                <div className=\"info-class\">\n                    <div className=\"sub-country-info-type\">Region : </div><div className=\"sub-country-info-value\">{this.state.region}</div>\n                </div>\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport CountryCard from  './../CountryCard/CountryCard.jsx';\nimport axios from 'axios';\nimport './Home.css';\n\nexport default class Home extends Component {\n  \n  constructor(props){\n      super(props);\n      this.state = {\n          //CountryData \n          countryData : \"\",\n          allData : \"\",\n\n          //controlPlot\n          readyPlot : false,\n\n          //Filter \n          countryName : \"\",\n          capitalName : \"\",\n          regionName : \"\"\n      }\n  }  \n\n  componentWillMount = () => {\n        //Downlaod news data\n        axios.get(\"https://restcountries.eu/rest/v2/\")\n        .then((response) => {\n            console.log(response)\n            this.setState({\n                countryData : response.data,\n                allData : response.data,\n                readyPlot : true\n            })\n        })\n        .catch( error => {\n\n        })\n  }\n\n  handleTextSearch = (event, type) => {\n    const val = event.target.value;\n    if( type == \"country\" ){\n        this.setState({\n            countryName : val,\n            readyPlot : false\n        }, ()=>{\n            this.filterDataForSearch(type);\n        })\n    }else if(type == \"capital\"){\n        this.setState({\n            capitalName : val,\n            readyPlot : false\n        }, ()=>{\n            this.filterDataForSearch(type);\n        })\n    }else if(type == \"region\"){\n        this.setState({\n            regionName : val,\n            readyPlot : false\n        }, ()=>{\n            this.filterDataForSearch(type);\n        })\n    }\n  }\n\n  filterDataForSearch = () => {\n       let filterArr = [];\n       const searchCountry = this.state.countryName.toLowerCase();\n       const searchCapital = this.state.capitalName.toLowerCase();\n       const searchRegion = this.state.regionName.toLowerCase();\n       this.state.allData.forEach( (item)=>{\n            if( item.name.toLowerCase().indexOf(searchCountry) != -1 \n                && item.capital.toLowerCase().indexOf(searchCapital) != -1 \n                && item.region.toLowerCase().indexOf(searchRegion) != -1 ){\n                filterArr.push(item);\n            }\n        })\n        this.setState({\n            countryData : filterArr,\n            readyPlot : true\n        })\n  }\n\n  render() {\n    let countryArr = [];\n    if( this.state.countryData == \"\" ){\n        countryArr = \"\"\n    }else{\n        this.state.countryData.forEach( (item, index) =>{\n            console.log(item)\n            countryArr.push(\n                <div className=\"country-card-block\">\n                        <CountryCard\n                            name = {item.name}\n                            capital = {item.capital}\n                            flag = {item.flag}\n                            region = {item.region}\n                        />\n                </div>\n            )\n        })\n    }\n    \n    return (\n      <div className=\"home-main\">\n        <div className=\"filter-box-div\">\n            <div className=\"filter-box-main\">\n                <div className=\"search-box-div\" >\n                        <TextField\n                            id=\"standard-name\"\n                            style={{width:\"100%\",marginTop:\"2%\"}}\n                            label=\"Search Country\"\n                            value={this.state.countryName}\n                            onChange={(event)=> this.handleTextSearch(event,\"country\") }\n                            margin=\"normal\"\n                        />\n                </div>\n            </div>\n            <div className=\"filter-box-main\">\n                <div className=\"search-box-div\" >\n                        <TextField\n                            id=\"standard-name\"\n                            style={{width:\"100%\",marginTop:\"2%\"}}\n                            label=\"Search Capital\"\n                            value={this.state.capitalName}\n                            onChange={(event)=> this.handleTextSearch(event,\"capital\") }\n                            margin=\"normal\"\n                        />\n                </div>\n            </div>\n            <div className=\"filter-box-main\">\n                <div className=\"search-box-div\" >\n                        <TextField\n                            id=\"standard-name\"\n                            style={{width:\"100%\",marginTop:\"2%\"}}\n                            label=\"Search Region\"\n                            value={this.state.regionName}\n                            onChange={(event)=> this.handleTextSearch(event,\"region\") }\n                            margin=\"normal\"\n                        />\n                </div>\n            </div>\n            <div className=\"filter-box-main\"></div>\n        </div>\n        <hr />  \n        <div className=\"country-body-div\">\n            { (this.state.readyPlot)?countryArr:\"\"}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport CustomNavbar from './components/CustomNavbar/CustomNavbar.jsx';\nimport Home from './components/Home/Home.jsx';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navbar-section\">\n          <CustomNavbar />\n        </div>\n        <div className=\"pages\">\n            <Home/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}